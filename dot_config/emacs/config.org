* Configuration
Some general performance based improvements. Reset GC after init as it is maxed out in [[file:early-init.el][early init]].
** General basic
Mac keys, options is meta, cmd is super.
#+BEGIN_SRC elisp
  ;; -*- lexical-binding: t -*-

  ;;; change the key on mac.
  (setq mac-option-modifier 'meta
        mac-command-modifier 'super)

  (global-set-key (kbd "s-a") 'mark-whole-buffer) ;;;对应Windows上面的Ctrl-a 全选
  (global-set-key (kbd "s-c") 'kill-ring-save) ;;;对应Windows上面的Ctrl-c 复制
  (global-set-key (kbd "s-s") 'save-buffer) ;;; 对应Windows上面的Ctrl-s 保存
  (global-set-key (kbd "s-v") 'yank) ;;;对应Windows上面的Ctrl-v 粘贴
  (global-set-key (kbd "s-z") 'undo) ;;;对应Windows上面的Ctrol-z 撤销
  (global-set-key (kbd "s-x") 'kill-region) ;;;对应Windows上面的Ctrol-x 剪切
#+END_SRC

Set default font size
#+begin_src elisp
  ;;; 更改显示字体大小 12pt
  ;;; http://stackoverflow.com/questions/294664/how-to-set-the-font-size-in-emacs
  (set-face-attribute 'default nil :height 120)
#+end_src

Set the package repos, mirror is from [[https://elpamirror.emacs-china.org/][Emacs China]].
#+BEGIN_SRC elisp
  (require 'package)
  (setq package-archives '(("gnu"   . "http://1.15.88.122/gnu/")
                           ("melpa" . "http://1.15.88.122/melpa/")
                           ("org"   . "http://1.15.88.122/org/")))

  (package-initialize)        

  (when (not package-archive-contents)
    (package-refresh-contents))

  ;;; Initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)       
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)                            

  ;;; Make sure packages are downloaded and installed before they are run
  ;;; also frees you from having to put :ensure t after installing EVERY PACKAGE.
  (setq use-package-always-ensure t)
#+END_SRC

Change some emacs default config.
#+BEGIN_SRC elisp
  (setq max-lisp-eval-depth 10000)
  (setq max-specpdl-size 10000)

  ;;; keep buffer auto update to date
  (global-auto-revert-mode t)

  ;;; close auto save because we have git now
  (setq auto-save-default nil)
  ;;; close emacs's backup
  (setq make-backup-files nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  ;;; 让鼠标滚动更好用
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)

  ;;; change cursor type
  (setq-default cursor-type 'bar)

  ;;; Show matching parentheses
  (show-paren-mode 1)

  ;;; 关闭工具栏
  (tool-bar-mode -1)
  ;;; 显示行号
  (global-linum-mode 1)
    ;;; highlight line
  (global-hl-line-mode 1)
  (setq inhibit-startup-message t)
#+END_SRC

Helpful package
#+begin_src elisp
  (use-package helpful)
#+end_src

Open command-line log
#+begin_src elisp
  (use-package command-log-mode)
#+end_src

Rainbow delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Color theme
Config emacs like vscode.
#+BEGIN_SRC elisp
  (use-package vscode-dark-plus-theme
    :config
    (load-theme 'vscode-dark-plus t))
#+END_SRC

** Vim keybindings
#+BEGIN_SRC elisp
  ;;; Vim Bindings
  (use-package evil
    ;;; :demand t
    ;;; bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))


  (use-package key-chord
    :after evil 
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.5)
    (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state))

  (use-package evil-surround
  :hook (after-init . global-evil-surround-mode))

  (use-package evil-collection
  :hook (evil-mode . evil-collection-init)
  :custom
  (evil-collection-calendar-want-org-bindings t)
  (evil-collection-outline-bind-tab-p nil)
  (evil-collection-setup-debugger-keys nil))
#+END_SRC

** Completion frameworks
#+BEGIN_SRC elisp
  (use-package vertico
    :init
    (vertico-mode +1))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))


  (use-package marginalia
    :config (marginalia-mode))

  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)

  (use-package orderless
    :init
    (setq completion-styles '(orderless)))


  (use-package embark
    :bind
    (("C-;" . embark-act)         ;; pick some comfortable binding
     ("C-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command 'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    )

  ;;; consult for search in file
  (use-package consult
    :bind
    (("C-s" . consult-line))
    )

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

*** Company
#+begin_src elisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-tooltip-align-annotations t)
    (setq company-minimum-prefix-length 1)
    :bind (:map company-active-map
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort)
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** which key
#+begin_src elisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** Projectile
#+BEGIN_SRC elisp
  (use-package projectile
    :ensure t
    :hook (after-init . projectile-mode)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (dolist (dir '("bazel-bin"
                   "bazel-out"
                   "bazel-testlogs"))
      (add-to-list 'projectile-globally-ignored-directories dir))
    :custom
    (projectile-use-git-grep t)
    (projectile-project-search-path '("~/Workspace/" "~/Downloads/"))
    (projectile-indexing-method 'alien)
    (projectile-kill-buffers-filter 'kill-only-files)
    ;; Ignore uninteresting files. It has no effect when using alien mode.
    (projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store"))
    (projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a"))
    (projectile-ignored-projects `("~/"
                                   "/tmp/"
                                   "/private/tmp/"
                                   ,package-user-dir)))
#+END_SRC

** Org mode
#+BEGIN_SRC elisp
  (use-package ox-reveal)
  (require 'org-protocol)
  (custom-set-variables
   '(org-directory "~/OneDrive/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   '(org-confirm-babel-evaluate nil)
   '(org-src-fontify-natively t)
   '(org-export-with-toc nil)
   )


  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))))


  (setq org-agenda-files (list "~/OneDrive/orgfiles/notes.org"
                               "~/OneDrive/orgfiles/i.org"))

  (setq org-capture-templates
        '(("l" "Link" entry (file+headline "~/OneDrive/orgfiles/links.org" "Links")
           "* %a %^g\n %?\n %T\n %i")
          ("b" "Blog idea" entry (file+headline "~/OneDrive/orgfiles/i.org" "POSTS:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/OneDrive/orgfiles/i.org" "To Do and Notes")
           "* TODO %?\n%u" :prepend t)
          ("m" "Mail To Do" entry (file+headline "~/OneDrive/orgfiles/i.org" "To Do and Notes")
           "* TODO %a\n %?" :prepend t)
          ("n" "Note" entry (file+olp "~/OneDrive/orgfiles/i.org" "Notes")
           "* %u %? " :prepend t)
          ("r" "RSS" entry (file+headline "~/OneDrive/shared/elfeed.org" "Feeds misc")
           "** %A %^g\n")
          ))

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ("\\.x?html?\\'" . "/usr/bin/firefox %s")
                  ) org-file-apps ))
  ;; babel stuff
  (require 'ob-clojure)
  (require 'ob-gnuplot)
  (use-package ob-restclient)
  (require 'ob-restclient)
  (setq org-babel-clojure-backend 'cider)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (restclient . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (shell . t)
     (java . t)
     (C . t)
     (clojure . t)
     (js . t)
     (ditaa . t)
     (dot . t)
     (org . t)
     (latex . t )
     ))


  (require 'ox-reveal)

  (require 'org-tempo)  ;; to bring back easy templates using <s or <n

  (require 'ox-publish)

  (require 'org-tempo)  ;开启easy template

  (setq org-refile-targets '((nil :maxlevel . 2)))

#+END_SRC

** Magit
#+BEGIN_SRC elisp
  (use-package magit
  :ensure t
  :hook (git-commit-setup . git-commit-turn-on-flyspell)
  :bind (("C-x g"   . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch))
  :custom
  (magit-diff-refine-hunk t)
  (magit-diff-paint-whitespace nil)
  (magit-ediff-dwim-show-on-hunks t))

  (use-package magit-popup)
#+END_SRC

** Splash
#+BEGIN_SRC emacs-lisp
  ;;; Dependencies
  (use-package page-break-lines)
  (use-package all-the-icons)

  (use-package dashboard
    :config
    (setq show-week-agenda-p t)
    (setq dashboard-items '((recents . 15) (projects . 5) (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 3)
    (setq dashboard-center-content t)
    (dashboard-setup-startup-hook)
    )
#+end_src
** Keymaps
#+BEGIN_SRC elisp
  (use-package general
    :after evil
    :config
    (general-create-definer my/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (my/leader-keys
      "p"  '(:ignore t :which-key "project")
      "pp" '(project-switch-project :which-key "choose project")
      "pc" '(projectile-command-map :which-key "choose action")

      "f"  '(:ignore t :which-key "file")
      "ff" '(find-file :which-key "find file")
      "ft" '(treemacs :which-key "treemacs")
      "fd" '(dired :which-key "dired")
      "fs" '(save-buffer :which-key "save-buffer")
      "fr" '(consult-recent-file :which-key "recent file")
      "fm" '(imenu :which-key "imenu")

      "b" '(:ignore t :which-key "buffer")
      "bb" '(switch-to-buffer :which-key "switch buffer")
      "bd" '(ido-kill-buffer :which-key "kill buffer")
      "br" '(revert-buffer :which-key "revert-buffer")

      "g"  '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "git status")

      "h"  '(:ignore t :which-key "helpful")
      "hv" '(helpful-variable :which-key "helpful variable")
      "hC" '(helpful-callable :which-key "helpful callable")
      "hk" '(helpful-key :which-key "helpful key")
      "hp" '(helpful-at-point :which-key "helpful at point")
      "hf" '(helpful-function :which-key "helpful function")
      "hc" '(helpful-command :which-key "helpful command")

      "o"  '(:ignore t :which-key "org mode")
      "oa" '(org-agenda :which-key "org agenda")
      "ot" '(counsel-org-tag :which-key "org tag")
      "ose" '(org-set-effort :which-key "org set effort")
      "oc" '(org-capture :which-key "org capture")
      ;;"obt" '(org-babel-tangel :which-key "org babel tangel")

      "s"  '(:ignore t :which-key "system")
      "st" '(eshell :which-key "eshell")
      "sb" '(split-window-below :which-key "split window below")
      "sr" '(split-window-right :which-key "split window right")

      ))
#+END_SRC

** LSP basic
#+BEGIN_SRC elisp
  ;;; flycheck syntax checker
  (use-package flycheck
    :init (global-flycheck-mode))

  ;;; LSP
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :hook ((python-mode . lsp-deferred)
           (c-mode . lsp-deferred)
           (c++-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (rust-mode . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;;; (use-package company-lsp :commands company-lsp)

  ;;; Optional - provides snippet support.

  (use-package yasnippet
    :commands yas-minor-mode
    :hook (
           (go-mode . yas-minor-mode)
           (python-mode . yas-minor-mode)
           ))

  (setq lsp-ui-doc-enable t
        lsp-ui-peek-enable t
        lsp-ui-sideline-enable t
        lsp-ui-imenu-enable t
        lsp-ui-flycheck-enable t)


#+END_SRC

** Python
#+begin_src elisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))

  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

  (use-package py-isort
    :after python
    :hook ((python-mode . pyvenv-mode)
           (before-save . py-isort-before-save)))

  (use-package blacken
    :delight
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 79))
#+end_src

** C/C++
#+BEGIN_SRC elisp
  (use-package google-c-style
    :config
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent)
    )
#+END_SRC
